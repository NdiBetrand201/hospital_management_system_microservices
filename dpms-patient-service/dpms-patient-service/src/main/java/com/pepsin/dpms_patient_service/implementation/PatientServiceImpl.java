package com.pepsin.dpms_patient_service.implementation;


import com.pepsin.dpms_patient_service.DTO.PatientRequestDTO;
import com.pepsin.dpms_patient_service.DTO.PatientResponseDTO;
import com.pepsin.dpms_patient_service.DTO.PatientUpdateDTO;
import com.pepsin.dpms_patient_service.exception.ResourceNotFoundException;
import com.pepsin.dpms_patient_service.model.Patient;
import com.pepsin.dpms_patient_service.repository.PatientRepository;
import com.pepsin.dpms_patient_service.service.PatientService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * This is the "Hospital Manager" who actually does the work.
 * It implements the promises made in the PatientService interface.
 * This class contains the "business logic" (the rules of our hospital).
 *
 * @Service: This sticker tells Spring that this class is a "Service" component,
 * meaning it holds business logic. Spring will manage it automatically.
 * @RequiredArgsConstructor (from Lombok): This is another Lombok helper!
 * It automatically creates a constructor
 * that takes all 'final' fields (like patientRepository)
 * and injects them. This is the best way to do "Dependency Injection".
 */
@Service

public class PatientServiceImpl implements PatientService {

    public PatientServiceImpl(PatientRepository patientRepository) {
        this.patientRepository = patientRepository;
    }

    // This is our "Filing Cabinet Librarian" (PatientRepository).
    // The Hospital Manager needs to talk to the Librarian to save/find records.
    private  PatientRepository patientRepository;



    /**
     * Converts a PatientRequestDTO (form) into a Patient entity (record card).
     * @param dto The request DTO.
     * @return The Patient entity.
     */
    private Patient mapToEntity(PatientRequestDTO dto) {
        Patient patient = new Patient();
        // We don't set ID here, as it's generated by the database
        patient.setFirstName(dto.getFirstName());
        patient.setLastName(dto.getLastName());
        patient.setDateOfBirth(dto.getDateOfBirth());
        patient.setGender(dto.getGender());
        patient.setContactNumber(dto.getContactNumber());
        patient.setEmail(dto.getEmail());
        patient.setAddress(dto.getAddress());
        return patient;
    }

    /**
     * Converts a Patient entity (record card) into a PatientResponseDTO (summary form).
     * @param patient The Patient entity.
     * @return The response DTO.
     */
    private PatientResponseDTO mapToDTO(Patient patient) {
        PatientResponseDTO dto = new PatientResponseDTO();
        dto.setId(patient.getId());
        dto.setFirstName(patient.getFirstName());
        dto.setLastName(patient.getLastName());
        dto.setDateOfBirth(patient.getDateOfBirth());
        dto.setGender(patient.getGender());
        dto.setContactNumber(patient.getContactNumber());
        dto.setEmail(patient.getEmail());
        dto.setAddress(patient.getAddress());
        return dto;
    }

    /**
     * Creates a new patient record.
     * 1. Takes the PatientRequestDTO (form).
     * 2. Converts it into a Patient entity (record card).
     * 3. Asks the Librarian (patientRepository) to save the new record.
     * 4. Converts the saved Patient entity back into a PatientResponseDTO (summary form).
     * 5. Returns the summary form.
     */
    @Override
    public PatientResponseDTO createPatient(PatientRequestDTO patientRequestDTO) {
        // In a real app, you might add checks here, e.g., if email already exists
        // Optional<Patient> existingPatient = patientRepository.findByEmail(patientRequestDTO.getEmail());
        // if (existingPatient.isPresent()) {
        //     throw new IllegalArgumentException("Patient with this email already exists.");
        // }

        Patient patient = mapToEntity(patientRequestDTO); // Convert form to record card
        Patient savedPatient = patientRepository.save(patient); // Ask librarian to save
        return mapToDTO(savedPatient); // Convert saved record card to summary form
    }

    /**
     * Retrieves a patient's summary form by their unique ID.
     * 1. Asks the Librarian (patientRepository) to find the record card by ID.
     * 2. If found, converts it to a summary form and returns it.
     * 3. If NOT found, throws a "ResourceNotFoundException" (meaning: "Couldn't find that patient!").
     */
    @Override
    public PatientResponseDTO getPatientById(UUID id) {
        Patient patient = patientRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Patient not found with id: " + id));
        return mapToDTO(patient);
    }

    /**
     * Retrieves all patient summary forms.
     * 1. Asks the Librarian (patientRepository) for all record cards.
     * 2. Converts each record card into a summary form.
     * 3. Returns a list of all summary forms.
     */
    @Override
    public List<PatientResponseDTO> getAllPatients() {
        return patientRepository.findAll().stream()
                .map(this::mapToDTO) // Convert each Patient entity to PatientResponseDTO
                .collect(Collectors.toList());
    }

    /**
     * Updates an existing patient's information.
     * 1. Finds the existing patient record card by ID.
     * 2. If found, updates the fields with new information from the PatientUpdateDTO.
     * 3. Asks the Librarian (patientRepository) to save the updated record.
     * 4. Converts the updated record card to a summary form and returns it.
     * 5. If NOT found, throws a "ResourceNotFoundException".
     */
    @Override
    public PatientResponseDTO updatePatient(UUID id, PatientUpdateDTO patientUpdateDTO) {
        Patient existingPatient = patientRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Patient not found with id: " + id));

        // Update fields only if they are provided in the DTO
        Optional.ofNullable(patientUpdateDTO.getFirstName()).ifPresent(existingPatient::setFirstName);
        Optional.ofNullable(patientUpdateDTO.getLastName()).ifPresent(existingPatient::setLastName);
        Optional.ofNullable(patientUpdateDTO.getDateOfBirth()).ifPresent(existingPatient::setDateOfBirth);
        Optional.ofNullable(patientUpdateDTO.getGender()).ifPresent(existingPatient::setGender);
        Optional.ofNullable(patientUpdateDTO.getContactNumber()).ifPresent(existingPatient::setContactNumber);
        Optional.ofNullable(patientUpdateDTO.getEmail()).ifPresent(existingPatient::setEmail);
        Optional.ofNullable(patientUpdateDTO.getAddress()).ifPresent(existingPatient::setAddress);

        Patient updatedPatient = patientRepository.save(existingPatient); // Ask librarian to save updated record
        return mapToDTO(updatedPatient);
    }

    /**
     * Deletes a patient record by their unique ID.
     * 1. Checks if the patient record exists.
     * 2. If it exists, asks the Librarian (patientRepository) to delete it.
     * 3. If NOT found, throws a "ResourceNotFoundException".
     */
    @Override
    public void deletePatient(UUID id) {
        if (!patientRepository.existsById(id)) {
            throw new ResourceNotFoundException("Patient not found with id: " + id);
        }
        patientRepository.deleteById(id);
    }
}
